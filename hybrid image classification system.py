# -*- coding: utf-8 -*-
"""tp3mlipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pqaYw2h_Aqsf-osZ7mZC2dGbzCKP7-9M
"""

# Import des bibliothèques nécessaires
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.datasets import mnist
from sklearn.metrics import accuracy_score

# Chargement de l'ensemble de données MNIST
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Prétraitement des images
x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0
x_train_flat = x_train.reshape((x_train.shape[0], -1))
x_test_flat = x_test.reshape((x_test.shape[0], -1))

# Définition du modèle du réseau de neurones
model = Sequential()
model.add(Flatten(input_shape=(28, 28)))  # Ajuster en fonction de la taille de vos images
model.add(Dense(128, activation='relu'))
model.add(Dense(10, activation='softmax'))

# Compilation et entraînement du modèle de réseau de neurones
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(x_train, y_train, epochs=100, batch_size=32, validation_split=0.2)

# Prédictions du réseau de neurones sur l'ensemble de test
nn_predictions = np.argmax(model.predict(x_test), axis=1)
print(nn_predictions)

from sklearn.neighbors import KNeighborsClassifier

# Instantiate the KNN model with multiple parameters
knn_model = KNeighborsClassifier(
    n_neighbors=3,     # Adjust as needed
    weights='uniform', # Weight function used in prediction (options: 'uniform', 'distance')
    algorithm='auto',  # Algorithm used to compute the nearest neighbors ('auto', 'ball_tree', 'kd_tree', 'brute')
    p=2,               # Power parameter for the Minkowski metric (p=1 for Manhattan distance, p=2 for Euclidean distance)
    metric='minkowski' # The distance metric to use for the tree ('minkowski' is generally used with the p parameter)
)

# Fit the model to the training data
knn_model.fit(x_train_flat, y_train)

# Prédictions de k-NN sur l'ensemble de test
knn_predictions = knn_model.predict(x_test_flat)

from scipy.stats import mode

# Combinaison des prédictions (vote majoritaire)
hybrid_predictions = mode(np.vstack((nn_predictions, knn_predictions)), axis=0).mode.flatten()

# Évaluation des performances
nn_accuracy = accuracy_score(y_test, nn_predictions)
knn_accuracy = accuracy_score(y_test, knn_predictions)
hybrid_accuracy = accuracy_score(y_test, hybrid_predictions)

# Affichage des résultats
print(f"Neural Network Accuracy: {nn_accuracy}")
print(f"K-NN Accuracy: {knn_accuracy}")
print(f"Hybrid Model Accuracy: {hybrid_accuracy}")